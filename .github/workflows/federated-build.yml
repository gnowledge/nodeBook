name: Federated Build and Release

on:
  push:
    branches: [ federated-releases, main ]
  pull_request:
    branches: [ federated-releases, main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Install all dependencies
      run: npm run install:all
    
    - name: Run backend tests
      run: npm run test
    
    - name: Run frontend type check
      run: cd nodebook-base/frontend && npm run type-check

  build-frontend:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Install all dependencies
      run: npm run install:all
    
    - name: Build frontend
      run: npm run build:frontend
    
    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: nodebook-base/frontend/dist/
        retention-days: 30

  build-docker:
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: nodebook-base/frontend/dist/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: nodebook:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: nodebook:latest
        retention-days: 30

  build-electron:
    needs: build-frontend
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: nodebook-base/frontend/dist/
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Install all dependencies
      run: npm run install:all
    
    - name: Build Electron package
      run: cd electron && npm run build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload Electron packages
      uses: actions/upload-artifact@v4
      with:
        name: electron-packages-${{ matrix.os }}
        path: electron/dist/
        retention-days: 30

  create-release:
    needs: [build-docker, build-electron]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: ./
    
    - name: Download Electron packages
      uses: actions/download-artifact@v4
      with:
        name: electron-packages-ubuntu-latest
        path: ./electron/dist/
    
    - name: Create release assets
      run: |
        mkdir -p releases/v${{ github.event.release.tag_name }}
        
        # Copy Electron packages
        cp -r electron/dist/* releases/v${{ github.event.release.tag_name }}/
        
        # Create deployment scripts
        cat > releases/v${{ github.event.release.tag_name }}/deploy-docker.sh << 'EOF'
        #!/bin/bash
        echo "🐳 Deploying NodeBook with Docker..."
        echo "This will start NodeBook in a Docker container with PWA support"
        docker-compose up -d
        echo "✅ NodeBook deployed successfully!"
        echo "Access the application at: http://localhost:3000"
        echo ""
        echo "To stop the service:"
        echo "docker-compose down"
        EOF
        chmod +x releases/v${{ github.event.release.tag_name }}/deploy-docker.sh
        
        cat > releases/v${{ github.event.release.tag_name }}/README.md << 'EOF'
        # NodeBook v${{ github.event.release.tag_name }} - Federated Release
        
        This release includes both Docker and Electron packages for the federated NodeBook architecture.
        
        ## Deployment Options
        
        ### 1. Docker Deployment (PWA)
        - Run `./deploy-docker.sh` to start the service
        - Access via web browser at http://localhost:3000
        - Supports multiple users with authentication
        
        ### 2. Desktop Application
        - **Linux**: Use the .AppImage file
        - **Windows**: Use the .exe file  
        - **macOS**: Use the .dmg file
        
        ## Features
        
        - Unified codebase for all deployment scenarios
        - User authentication and data segregation
        - P2P federation capabilities
        - Import/export functionality for data safety
        - Offline-first desktop experience
        
        ## P2P Federation
        
        To enable P2P synchronization between instances:
        1. Start multiple NodeBook instances
        2. Use the peer management API to connect instances
        3. Configure sync settings in the admin panel
        
        ## Support
        
        For issues and questions, please visit the project repository.
        EOF
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./releases/v${{ github.event.release.tag_name }}/
        asset_name: nodebook-federated-v${{ github.event.release.tag_name }}
        asset_content_type: application/zip
