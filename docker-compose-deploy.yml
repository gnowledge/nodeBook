services:
  # Keycloak Authentication Service
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.0
    container_name: nodebook-keycloak-p2p-dev
    # No external ports - only accessible via nginx proxy
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN_USER:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_DB=dev-file
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HOSTNAME=${DOMAIN_NAME}
      - KC_HOSTNAME_PORT=443
      - KC_HOSTNAME_STRICT_HTTPS=true
      - KC_HOSTNAME_STRICT_BACKCHANNEL=true
      - KC_PROXY=edge
      - KC_PROXY_ADDRESS_FORWARDING=true
    volumes:
      - keycloak-data:/opt/keycloak/data
    networks:
      - nodebook-p2p-net
    restart: unless-stopped
    command: ["start-dev"]

  # P2P NodeBook Backend Service
  nodebook-p2p:
    build:
      context: ./nodebook-base
      dockerfile: Dockerfile.p2p
    container_name: nodebook-p2p-dev
    # No external ports - only accessible via nginx proxy
    volumes:
      - ./nodebook-base:/app
      - /app/node_modules
      - ./data:/app/data
    environment:
      - NODE_ENV=development
      - P2P_ENABLED=true
      - COLLABORATION_ENABLED=true
      - LOG_LEVEL=info
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=nodebook
      - DATA_PATH=/app/data
    networks:
      - nodebook-p2p-net
    depends_on:
      - keycloak
    restart: unless-stopped

  # P2P Network Monitor Service
  p2p-monitor:
    build:
      context: ./nodebook-base
      dockerfile: Dockerfile.p2p-monitor
    container_name: nodebook-p2p-monitor-dev
    # No external ports - only accessible via nginx proxy
    volumes:
      - ./nodebook-base:/app
      - /app/node_modules
      - ./data:/app/data
    environment:
      - NODE_ENV=development
      - MONITOR_PORT=3003
      - P2P_NETWORK_ID=nodebook-dev
      - DATA_PATH=/app/data
    networks:
      - nodebook-p2p-net
    depends_on:
      - nodebook-p2p
    restart: unless-stopped

  # Media backend service for file uploads and management
  media-backend:
    build:
      context: ./media-backend
      dockerfile: Dockerfile
    container_name: nodebook-media-backend-p2p-dev
    # No external ports - only accessible via nginx proxy
    volumes:
      - ./data/media:/app/media-data
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATA_PATH=/app/media-data
    networks:
      - nodebook-p2p-net
    restart: unless-stopped

  # Y.js Signaling Server for WebRTC Collaboration
  signaling-server:
    build:
      context: ./nodebook-base
      dockerfile: Dockerfile.p2p
    container_name: nodebook-signaling-server-dev
    # No external ports - only accessible via nginx proxy
    volumes:
      - ./nodebook-base:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=4444
    networks:
      - nodebook-p2p-net
    restart: unless-stopped
    command: ["node", "signaling-server.js"]

  # NLP service for text analysis and graph suggestions
  nlp-service:
    build:
      context: ./nlp-service
      dockerfile: Dockerfile
    container_name: nodebook-nlp-service-p2p-dev
    # No external ports - only accessible via nginx proxy
    environment:
      - NODE_ENV=development
      - PORT=3002
    networks:
      - nodebook-p2p-net
    restart: unless-stopped

  # WordNet service for auto-filling node descriptions
  wordnet-service:
    build:
      context: ./wordnet-service
      dockerfile: Dockerfile
    container_name: nodebook-wordnet-service-p2p-dev
    # No external ports - only accessible via nginx proxy
    environment:
      - NODE_ENV=development
      - PORT=3005
    networks:
      - nodebook-p2p-net
    restart: unless-stopped

  # Frontend service - static build for production
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: nodebook-frontend-p2p-dev
    command: sh -c "cd nodebook-base/frontend && npm run build && npx serve -s dist -l 3004"
    working_dir: /app
    volumes:
      - ./nodebook-base:/app/nodebook-base
      - /app/nodebook-base/node_modules
    # No external ports - only accessible via nginx proxy
    environment:
      - VITE_API_TARGET=https://${DOMAIN_NAME}/api
      - VITE_KEYCLOAK_URL=https://${DOMAIN_NAME}/auth
      - VITE_KEYCLOAK_REALM=nodebook
      - VITE_KEYCLOAK_CLIENT_ID=nodebook-frontend
      - VITE_KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - VITE_MEDIA_BACKEND_URL=https://${DOMAIN_NAME}/media
      - VITE_NLP_SERVICE_URL=https://${DOMAIN_NAME}/nlp
      - VITE_WORDNET_SERVICE_URL=https://${DOMAIN_NAME}/wordnet
      - VITE_P2P_ENABLED=true
      - VITE_DEV_MODE=false
    networks:
      - nodebook-p2p-net
    depends_on:
      - nodebook-p2p
      - keycloak
      - media-backend
      - nlp-service
      - wordnet-service
    restart: unless-stopped



  # Nginx Proxy Manager for SSL certificate management and reverse proxy
  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nodebook-nginx-proxy-manager
    ports:
      - '80:80'      # HTTP (for Let's Encrypt challenges)
      - '443:443'    # HTTPS
      - '81:81'      # Admin interface
    volumes:
      - nginx-proxy-data:/data
      - nginx-letsencrypt:/etc/letsencrypt
    environment:
      - DB_SQLITE_FILE=/data/database.sqlite
    networks:
      - nodebook-p2p-net
    restart: unless-stopped

networks:
  nodebook-p2p-net:
    driver: bridge

volumes:
  # Keycloak data persistence
  keycloak-data:
    driver: local
  # Let's Encrypt certificates
  nginx-letsencrypt:
    driver: local
  # Nginx Proxy Manager data
  nginx-proxy-data:
    driver: local
